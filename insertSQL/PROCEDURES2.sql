CREATE OR REPLACE PROCEDURE INSERT_FT(
    ft_type VARCHAR2,
    trans_id NUMBER,
    meth VARCHAR2,
    from_acc NUMBER,
    to_acc NUMBER,
		curr VARCHAR2,
		amnt NUMBER
) IS
BEGIN
        INSERT INTO FINANCIAL_TRANSACTIONS (
            FINANCIAL_TRANSACTION_ID,
            TYPE,
            PRODUCT_TRANSACTION_ID,
            METHOD,
            FROM_ACCOUNT,
            TO_ACCOUNT,
						STATUS,
						CURRENCY,
						AMOUNT
        ) VALUES (
            FTRANSACTION_ID_SEQ.NEXTVAL,
            UPPER(ft_type),
            trans_id,
						meth,
						from_acc,
						to_acc,
						UPPER('PENDING'),
						curr,
						amnt
        );
END;
/

CREATE OR REPLACE PROCEDURE INSERT_PURCHASE_TRANSACTION(
    trans_id NUMBER,
    meth VARCHAR2,
    to_acc NUMBER,
		curr VARCHAR2,
		amnt NUMBER
) IS
	 from_acc NUMBER;
BEGIN
				SELECT P.ID INTO from_acc
				FROM ORGANIZATIONS O JOIN PAYMENT_INFO P ON O.ORGANIZATION_ID=P.OWNER_ID
				WHERE O.TYPE='CENTRAL';
				
        INSERT_FT('PURCHASE_ORDER_PAYMENT', trans_id,meth,from_acc,to_acc,curr,amnt);
END;
/



--insert SHIPMENTS
CREATE OR REPLACE PROCEDURE INSERT_SHIPMENTS(
    tcompany_id NUMBER,
    trans_id NUMBER,
    dept_time VARCHAR2,
		dept_date VARCHAR2,
		vehicle_num VARCHAR2,
    currloc VARCHAR2,
		start_loc NUMBER,
		dest NUMBER,	
		amnt NUMBER
) IS
BEGIN
        INSERT INTO SHIPMENTS (
            SHIPMENT_ID,
            TRANSPORT_COMPANY_ID,
            PRODUCT_TRANSACTION_ID,
            DEPARTURE_TIME,
						DEPARTURE_DATE,
            VEHICLE_NO,
						CURRENT_LOCATION,
						START_LOCATION,
						DESTINATION,
						COST
        ) VALUES (
            SHIPMENT_ID_SEQ.NEXTVAL,
            tcompany_id,
            trans_id,
						dept_time,
						TO_DATE(dept_date, 'DD-MON-RR'),
						vehicle_num,
						currloc,
						start_loc,
						dest,
						amnt
        );
END;
/

SELECT S.SUPPLIER_ID, O.NAME,L2.STREET_ADDRESS||','||L2.CITY||'-'||L2.POSTAL_CODE||','||L2.COUNTRY PICKUP_LOCATION,P.ID,P.ACCOUNT_NUMBER,P.ACCOUNT_HOLDER,P.BANK_NAME, L2.LOCATION_ID, L1.LOCATION_ID
FROM ORGANIZATIONS O JOIN SUPPLIERS S ON (O.ORGANIZATION_ID=S.SUPPLIER_ID) 
	LEFT OUTER JOIN LOCATIONS L2 ON (O.ORGANIZATION_ID=L2.ORGANIZATION_ID AND (UPPER(L2.TYPE) IN ('DUAL','PICKUP'))) 
	LEFT OUTER JOIN LOCATIONS L1 ON (O.ORGANIZATION_ID=L1.ORGANIZATION_ID AND (UPPER(L1.TYPE) IN ('DUAL','PICKUP'))) 
	LEFT OUTER JOIN PAYMENT_INFO P ON (S.SUPPLIER_ID=P.OWNER_ID) 
WHERE S.SUPPLIER_ID=2


SELECT L2.LOCATION_ID
FROM ORGANIZATIONS O  
	LEFT OUTER JOIN LOCATIONS L2 ON (O.ORGANIZATION_ID=L2.ORGANIZATION_ID AND (UPPER(L2.TYPE) IN ('DUAL','PICKUP'))) 
WHERE O.TYPE='CENTRAL'


---------------------------------------------------------------------
-- CREATE OR REPLACE TRIGGER BEFORE_DELETE_ORGANIZATION
-- BEFORE DELETE ON ORGANIZATIONS
-- FOR EACH ROW
-- DECLARE
-- 
-- COUNTER NUMBER;
-- PENDING_TRANSACTIONS NUMBER;
--  v_log_message VARCHAR2(255); 
--  
-- BEGIN
--   
-- 	SELECT COUNT(*) INTO COUNTER FROM ORGANIZATION_BACKUP WHERE NAME=:OLD.NAME;
-- 	SELECT COUNT(*) INTO PENDING_TRANSACTIONS FROM PRODUCT_TRANSACTIONS WHERE COUNTERPARTY_ID=:OLD.ORGANIZATION_ID AND UPPER(STATUS)='PENDING';
-- 	
-- 	IF PENDING_TRANSACTIONS<>0 THEN
-- 	INSERT INTO LOGS (TIMESTAMP_COL, LOG_MESSAGE,TYPE)
--     VALUES (CURRENT_TIMESTAMP,:OLD.TYPE ||' ' ||:OLD.ORGANIZATION_ID||' '|| :OLD.NAME || ' DELETE FAILED','DELETE');
-- 		 RAISE_APPLICATION_ERROR(-20001, 'deletion stopped. Organization has pending transactions.');
-- 	 end if;
-- 	
-- 	IF COUNTER=0 THEN
-- 	INSERT INTO ORGANIZATION_BACKUP(NAME,URL,TYPE) VALUES (:OLD.NAME, :OLD.URL,:OLD.TYPE);
-- 	ELSE
-- 	UPDATE ORGANIZATION_BACKUP SET DELETE_TIME=CURRENT_TIMESTAMP;
-- 	END IF;
-- 	 v_log_message := :OLD.TYPE ||' ' || :OLD.NAME || ' DELETED';
-- 
--     -- Insert data into the LOGS table
--     INSERT INTO LOGS (TIMESTAMP_COL, LOG_MESSAGE,TYPE)
--     VALUES (CURRENT_TIMESTAMP, v_log_message,'DELETE');
-- 	
-- END;
-- /

--procedure 
CREATE OR REPLACE PROCEDURE UPDATE_FT(
   p_transaction_id NUMBER,
	 ft_type VARCHAR2
) IS
	arrival VARCHAR2(20);
BEGIN
        UPDATE FINANCIAL_TRANSACTIONS
				SET STATUS= 'COMPLETED'
				WHERE PRODUCT_TRANSACTION_ID=p_transaction_id AND TYPE=ft_type;
				
				SELECT ARRIVAL_TIME INTO arrival
				FROM SHIPMENTS
				WHERE PRODUCT_TRANSACTION_ID=p_transaction_id;
				
				IF ARRIVAL IS NOT NULL THEN
				UPDATE PRODUCT_TRANSACTIONS
				SET STATUS='COMPLETED'
				WHERE TRANSACTION_ID=p_transaction_id;
				END IF;
				
END;
/


CREATE OR REPLACE PROCEDURE UPDATE_STOCK(
   p_transaction_id NUMBER,
	 t_type VARCHAR2
) IS
BEGIN
        IF t_type= 'PURCHASE_TRANSACTION' THEN
					FOR R IN (SELECT *  FROM ORDER_PRODUCTS WHERE ORDER_ID=p_transaction_id)
					LOOP
						UPDATE PRODUCTS 
						SET CENTRAL_STOCK=CENTRAL_STOCK+R.QUANTITY
						WHERE PRODUCT_ID= R.PRODUCT_ID;
					END LOOP;					
				END IF;
				
				IF t_type= 'CLIENT_TRANSACTION' THEN
					FOR R IN (SELECT *  FROM ORDER_PRODUCTS WHERE ORDER_ID=p_transaction_id)
					LOOP
						UPDATE PRODUCTS 
						SET CENTRAL_STOCK=CENTRAL_STOCK-R.QUANTITY
						WHERE PRODUCT_ID=R.PRODUCT_ID;
					END LOOP;				
				END IF;
				
				IF t_type= 'CONFIRMED_SUPPLY' THEN
					FOR R IN (SELECT *  FROM CONFIRMED_SUPPLY_PRODUCTS WHERE SUPPLY_ID=p_transaction_id)
					LOOP
						UPDATE PRODUCTS 
						SET CENTRAL_STOCK=CENTRAL_STOCK-R.QUANTITY
						WHERE PRODUCT_ID=R.PRODUCT_ID;
					END LOOP;				
				END IF;
				
END;
/


CREATE OR REPLACE PROCEDURE UPDATE_SHIPMENT(
   p_transaction_id NUMBER,
	 t_type VARCHAR2,
	 arr_time VARCHAR2,
	 arr_date VARCHAR2
) IS
	stat VARCHAR2(20);
BEGIN
        UPDATE SHIPMENTS
				SET ARRIVAL_TIME=UPPER(arr_time), ARRIVAL_DATE= TO_DATE(arr_date,'DD-MON-RR' )
				WHERE PRODUCT_TRANSACTION_ID=p_transaction_id;
				
				SELECT STATUS INTO stat
				FROM FINANCIAL_TRANSACTIONS
				WHERE PRODUCT_TRANSACTION_ID=p_transaction_id AND TYPE='PURCHASE_ORDER_PAYMENT';
				
				
				
				IF t_type='PURCHASE_TRANSACTION' THEN
				UPDATE_STOCK(p_transaction_id,t_type);
				END IF;
				
				IF t_type='CLIENT_TRANSACTION' THEN
				UPDATE_STOCK(p_transaction_id,t_type);
				END IF;
				
				IF t_type='CONFIRMED_SUPPLY' THEN
				UPDATE_STOCK(p_transaction_id,t_type);
				END IF;
				
				DBMS_OUTPUT.PUT_LINE(stat);
				
				IF stat='COMPLETED' THEN
				UPDATE PRODUCT_TRANSACTIONS
				SET STATUS='COMPLETED'
				WHERE TRANSACTION_ID=p_transaction_id;
				END IF;
				
END;
/






SELECT DISTINCT PT.TRANSACTION_ID,O.NAME,O.ORGANIZATION_ID AS SUPPLIER_ID, PT.STATUS, FT.STATUS AS PAYMENT_STATUS, S2.STATUS AS SHIPMENT_STATUS,fT.TYPE
                FROM PRODUCT_TRANSACTIONS PT JOIN ORGANIZATIONS O ON O.ORGANIZATION_ID=PT.COUNTERPARTY_ID
                JOIN FINANCIAL_TRANSACTIONS FT ON FT.PRODUCT_TRANSACTION_ID=PT.TRANSACTION_ID
                JOIN (
                SELECT S.SHIPMENT_ID, S.PRODUCT_TRANSACTION_ID,
                CASE 
                        WHEN S.ARRIVAL_DATE IS NULL THEN 'PENDING'
                        ELSE 'COMPLETED'
                END STATUS
                FROM SHIPMENTS S
                ) S2 ON S2.PRODUCT_TRANSACTION_ID=PT.TRANSACTION_ID
                WHERE FT.TYPE='PURCHASE_ORDER_PAYMENT'
                ORDER BY PT.TRANSACTION_ID DESC



SELECT *
FROM FINANCIAL_TRANSACTIONS
WHERE PRODUCT_TRANSACTION_ID=10



BEGIN UPDATE_SHIPMENT(40,'PURCHASE_TRANSACTION', '5:00 PM', '6-MAR-2024'); END;
/

SELECT *
FROM PRODUCT_TRANSACTIONS
WHERE TRANSACTION_ID=40;

SELECT*
FROM FINANCIAL_TRANSACTIONS
WHERE PRODUCT_TRANSACTION_ID=40

SELECT*
FROM SHIPMENTS
WHERE PRODUCT_TRANSACTION_ID=40






























































